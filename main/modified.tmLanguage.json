{
    "information_for_contributors": [
        "This file has been converted from https://github.com/atom/language-go/blob/master/grammars/go.cson",
        "If you want to provide a fix or improvement, please create a pull request against the original repository.",
        "Once accepted there, we are happy to receive an update request."
    ],
    "version": "https://github.com/atom/language-go/commit/b6fd68f74efa109679e31fe6f4a41ac105262d0e",
    "name": "Go",
    "scopeName": "source.go",
    "comment": "Go language",
    "patterns":     [
        {
            "include": "#comments"
        },
        {
            "include": "#interpreted_string_literals"
        },
        {
            "include": "#raw_string_literals"
        },
        {
            "include": "#syntax_error_receiving_channels"
        },
        {
            "include": "#syntax_error_sending_channels"
        },
        {
            "include": "#syntax_error_using_slices"
        },
        {
            "include": "#syntax_error_numeric_literals"
        },
        {
            "include": "#built_in_functions"
        },
        {
            "include": "#function_declarations"
        },
        {
            "include": "#numeric_literals"
        },
        {
            "include": "#language_constants"
        },
        {
            "include": "#anonymous_pattern_1"
        },
        {
            "include": "#anonymous_pattern_2"
        },
        {
            "include": "#anonymous_pattern_3"
        },
        {
            "include": "#anonymous_pattern_4"
        },
        {
            "include": "#anonymous_pattern_6"
        },
        {
            "include": "#terminators"
        },
        {
            "include": "#brackets"
        },
        {
            "include": "#delimiters"
        },
        {
            "include": "#keywords"
        },
        {
            "include": "#operators"
        },
        {
            "include": "#runes"
        },
        {
            "include": "#storage_types"
        }
    ],
    "repository": {
        "interpreted_string_literals": {
            "comment": "Interpreted string literals",
            "begin": "\"",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.go"
                }
            },
            "end": "\"",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.go"
                }
            },
            "name": "string.quoted.double.go",
            "patterns": [
                {
                    "include": "#string_escaped_char"
                },
                {
                    "include": "#string_placeholder"
                }
            ]
        },
        "raw_string_literals": {
            "comment": "Raw string literals",
            "begin": "`",
            "beginCaptures": {
                "0": {
                    "name": "punctuation.definition.string.begin.go"
                }
            },
            "end": "`",
            "endCaptures": {
                "0": {
                    "name": "punctuation.definition.string.end.go"
                }
            },
            "name": "string.quoted.raw.go",
            "patterns": [
                {
                    "include": "#string_placeholder"
                }
            ]
        },
        "syntax_error_receiving_channels": {
            "comment": "Syntax error receiving channels",
            "match": "<\\-([\\t ]+)chan\\b",
            "captures": {
                "1": {
                    "name": "invalid.illegal.receive-channel.go"
                }
            }
        },
        "syntax_error_sending_channels": {
            "comment": "Syntax error sending channels",
            "match": "\\bchan([\\t ]+)<-",
            "captures": {
                "1": {
                    "name": "invalid.illegal.send-channel.go"
                }
            }
        },
        "syntax_error_using_slices": {
            "comment": "Syntax error using slices",
            "match": "\\[\\](\\s+)",
            "captures": {
                "1": {
                    "name": "invalid.illegal.slice.go"
                }
            }
        },
        "syntax_error_numeric_literals": {
            "comment": "Syntax error numeric literals",
            "match": "\\b0[0-7]*[89]\\d*\\b",
            "name": "invalid.illegal.numeric.go"
        },
        "built_in_functions": {
            "comment": "Built-in functions",
            "match": "\\b(append|cap|close|complex|copy|delete|imag|len|make|new|panic|print|println|real|recover)\\b(?=\\()",
            "name": "support.function.builtin.go"
        },
        "function_declarations": {
            "comment": "Function declarations",
            "match": "^(\\bfunc\\b)(?:\\s+(\\([^\\)]+\\)\\s+)?(\\w+)(?=\\())?",
            "captures": {
                "1": {
                    "name": "keyword.function.go"
                },
                "2": {
                    "patterns": [
                        {
                            "include": "#brackets"
                        },
                        {
                            "include": "#operators"
                        }
                    ]
                },
                "3": {
                    "patterns": [
                        {
                            "match": "\\d\\w*",
                            "name": "invalid.illegal.identifier.go"
                        },
                        {
                            "match": "\\w+",
                            "name": "entity.name.function.go"
                        }
                    ]
                }
            }
        },
        "language_constants": {
            "comment": "Language constants",
            "match": "\\b(true|false|nil|iota)\\b",
            "name": "constant.language.go"
        },
        "terminators": {
            "comment": "Terminators",
            "match": ";",
            "name": "punctuation.terminator.go"
        },
        "anonymous_pattern_1": {
            "begin": "\\b(package)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.package.go"
                }
            },
            "end": "(?!\\G)",
            "patterns": [
                {
                    "match": "\\d\\w*",
                    "name": "invalid.illegal.identifier.go"
                },
                {
                    "match": "\\w+",
                    "name": "entity.name.package.go"
                }
            ]
        },
        "anonymous_pattern_2": {
            "begin": "\\b(type)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.type.go"
                }
            },
            "end": "(?!\\G)",
            "patterns": [
                {
                    "match": "\\d\\w*",
                    "name": "invalid.illegal.identifier.go"
                },
                {
                    "match": "\\w+",
                    "name": "entity.name.type.go"
                }
            ]
        },
        "anonymous_pattern_3": {
            "begin": "\\b(import)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.import.go"
                }
            },
            "end": "(?!\\G)",
            "patterns": [
                {
                    "include": "#imports"
                }
            ]
        },
        "anonymous_pattern_4": {
            "begin": "\\b(var)\\s+",
            "beginCaptures": {
                "1": {
                    "name": "keyword.var.go"
                }
            },
            "end": "(?!\\G)",
            "patterns": [
                {
                    "include": "#variables"
                }
            ]
        },
        "anonymous_pattern_6": {
            "match": "\\b\\w+(?:,\\s*\\w+)*(?=\\s*:=)",
            "captures": {
                "0": {
                    "patterns": [
                        {
                            "match": "\\d\\w*",
                            "name": "invalid.illegal.identifier.go"
                        },
                        {
                            "match": "\\w+",
                            "name": "variable.other.assignment.go"
                        },
                        {
                            "include": "#delimiters"
                        }
                    ]
                }
            }
        },
        "brackets": {
            "patterns": [
                {
                    "begin": "{",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.begin.bracket.curly.go"
                        }
                    },
                    "end": "}",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.end.bracket.curly.go"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.begin.bracket.round.go"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.end.bracket.round.go"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        }
                    ]
                },
                {
                    "match": "\\[|\\]",
                    "name": "punctuation.definition.bracket.square.go"
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "begin": "/\\*",
                    "end": "\\*/",
                    "captures": {
                        "0": {
                            "name": "punctuation.definition.comment.go"
                        }
                    },
                    "name": "comment.block.go"
                },
                {
                    "begin": "//",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.go"
                        }
                    },
                    "end": "$",
                    "name": "comment.line.double-slash.go"
                }
            ]
        },
        "delimiters": {
            "patterns": [
                {
                    "match": ",",
                    "name": "punctuation.other.comma.go"
                },
                {
                    "match": "\\.(?!\\.\\.)",
                    "name": "punctuation.other.period.go"
                },
                {
                    "match": ":(?!=)",
                    "name": "punctuation.other.colon.go"
                }
            ]
        },
        "imports": {
            "patterns": [
                {
                    "match": "((?!\\s+\")[^\\s]*)?\\s*((\")([^\"]*)(\"))",
                    "captures": {
                        "1": {
                            "name": "entity.alias.import.go"
                        },
                        "2": {
                            "name": "string.quoted.double.go"
                        },
                        "3": {
                            "name": "punctuation.definition.string.begin.go"
                        },
                        "4": {
                            "name": "entity.name.import.go"
                        },
                        "5": {
                            "name": "punctuation.definition.string.end.go"
                        }
                    }
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.imports.begin.bracket.round.go"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.imports.end.bracket.round.go"
                        }
                    },
                    "patterns": [
                        {
                            "include": "#comments"
                        },
                        {
                            "include": "#imports"
                        }
                    ]
                }
            ]
        },
        "keywords": {
            "patterns": [
                {
                    "comment": "Flow control keywords",
                    "match": "\\b(break|case|continue|default|defer|else|fallthrough|for|go|goto|if|range|return|select|switch)\\b",
                    "name": "keyword.control.go"
                },
                {
                    "match": "\\bchan\\b",
                    "name": "keyword.channel.go"
                },
                {
                    "match": "\\bconst\\b",
                    "name": "keyword.const.go"
                },
                {
                    "match": "\\bfunc\\b",
                    "name": "keyword.function.go"
                },
                {
                    "match": "\\binterface\\b",
                    "name": "keyword.interface.go"
                },
                {
                    "match": "\\bmap\\b",
                    "name": "keyword.map.go"
                },
                {
                    "match": "\\bstruct\\b",
                    "name": "keyword.struct.go"
                }
            ]
        },
        "operators": {
            "comment": "Note that the order here is very important!",
            "patterns": [
                {
                    "match": "(\\*|&)(?=\\w)",
                    "name": "keyword.operator.address.go"
                },
                {
                    "match": "<\\-",
                    "name": "keyword.operator.channel.go"
                },
                {
                    "match": "\\-\\-",
                    "name": "keyword.operator.decrement.go"
                },
                {
                    "match": "\\+\\+",
                    "name": "keyword.operator.increment.go"
                },
                {
                    "match": "(==|!=|<=|>=|<(?!<)|>(?!>))",
                    "name": "keyword.operator.comparison.go"
                },
                {
                    "match": "(&&|\\|\\||!)",
                    "name": "keyword.operator.logical.go"
                },
                {
                    "match": "(=|\\+=|\\-=|\\|=|\\^=|\\*=|/=|:=|%=|<<=|>>=|&\\^=|&=)",
                    "name": "keyword.operator.assignment.go"
                },
                {
                    "match": "(\\+|\\-|\\*|/|%)",
                    "name": "keyword.operator.arithmetic.go"
                },
                {
                    "match": "(&(?!\\^)|\\||\\^|&\\^|<<|>>)",
                    "name": "keyword.operator.arithmetic.bitwise.go"
                },
                {
                    "match": "\\.\\.\\.",
                    "name": "keyword.operator.ellipsis.go"
                }
            ]
        },
        "runes": {
            "patterns": [
                {
                    "begin": "'",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.begin.go"
                        }
                    },
                    "end": "'",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.string.end.go"
                        }
                    },
                    "name": "string.quoted.rune.go",
                    "patterns": [
                        {
                            "match": "\\G(\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})|.)(?=')",
                            "name": "constant.other.rune.go"
                        },
                        {
                            "match": "[^']+",
                            "name": "invalid.illegal.unknown-rune.go"
                        }
                    ]
                }
            ]
        },
        "storage_types": {
            "patterns": [
                {
                    "match": "\\bbool\\b",
                    "name": "storage.type.boolean.go"
                },
                {
                    "match": "\\bbyte\\b",
                    "name": "storage.type.byte.go"
                },
                {
                    "match": "\\berror\\b",
                    "name": "storage.type.error.go"
                },
                {
                    "match": "\\b(complex(64|128)|float(32|64)|u?int(8|16|32|64)?)\\b",
                    "name": "storage.type.numeric.go"
                },
                {
                    "match": "\\brune\\b",
                    "name": "storage.type.rune.go"
                },
                {
                    "match": "\\bstring\\b",
                    "name": "storage.type.string.go"
                },
                {
                    "match": "\\buintptr\\b",
                    "name": "storage.type.uintptr.go"
                }
            ]
        },
        "string_escaped_char": {
            "patterns": [
                {
                    "match": "\\\\([0-7]{3}|[abfnrtv\\\\'\"]|x[0-9a-fA-F]{2}|u[0-9a-fA-F]{4}|U[0-9a-fA-F]{8})",
                    "name": "constant.character.escape.go"
                },
                {
                    "match": "\\\\[^0-7xuUabfnrtv\\'\"]",
                    "name": "invalid.illegal.unknown-escape.go"
                }
            ]
        },
        "string_placeholder": {
            "patterns": [
                {
                    "match": "%(\\[\\d+\\])?([\\+#\\-0\\x20]{,2}((\\d+|\\*)?(\\.?(\\d+|\\*|(\\[\\d+\\])\\*?)?(\\[\\d+\\])?)?))?[vT%tbcdoqxXUbeEfFgGspw]",
                    "name": "constant.other.placeholder.go"
                }
            ]
        },
        "variables": {
            "patterns": [
                {
                    "match": "(\\w+(?:,\\s*\\w+)*)(\\s+\\*?\\w+(?:\\.\\w+)?\\s*)?(?=\\s*=)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": "\\d\\w*",
                                    "name": "invalid.illegal.identifier.go"
                                },
                                {
                                    "match": "\\w+",
                                    "name": "variable.other.assignment.go"
                                },
                                {
                                    "include": "#delimiters"
                                }
                            ]
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "(\\w+(?:,\\s*\\w+)*)(\\s+(\\[(\\d*|\\.\\.\\.)\\])*\\*?(<-)?\\w+(?:\\.\\w+)?\\s*[^=].*)",
                    "captures": {
                        "1": {
                            "patterns": [
                                {
                                    "match": "\\d\\w*",
                                    "name": "invalid.illegal.identifier.go"
                                },
                                {
                                    "match": "\\w+",
                                    "name": "variable.other.declaration.go"
                                },
                                {
                                    "include": "#delimiters"
                                }
                            ]
                        },
                        "2": {
                            "patterns": [
                                {
                                    "include": "$self"
                                }
                            ]
                        }
                    }
                },
                {
                    "begin": "\\(",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.variables.begin.bracket.round.go"
                        }
                    },
                    "end": "\\)",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.variables.end.bracket.round.go"
                        }
                    },
                    "patterns": [
                        {
                            "include": "$self"
                        },
                        {
                            "include": "#variables"
                        }
                    ]
                }
            ]
        }
    }
}
