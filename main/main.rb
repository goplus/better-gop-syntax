# frozen_string_literal: true
require 'ruby_grammar_builder'
require 'walk_up'
require_relative walk_up_until("paths.rb")
require_relative './tokens.rb'

# 
# 
# create grammar!
# 
# 
grammar = Grammar.fromTmLanguage(__dir__+"/modified.tmLanguage.json")

# 
#
# Setup Grammar
#
# 
    grammar[:$initial_context] = [
        :comments,
        :interpreted_string_literals,
        :raw_string_literals,
        :syntax_error_receiving_channels,
        :syntax_error_sending_channels,
        :syntax_error_using_slices,
        :syntax_error_numeric_literals,
        :built_in_functions,
        :function_declarations,
        :functions,
        :numeric_literals,
        :language_constants,
        :anonymous_pattern_1,
        :anonymous_pattern_2,
        :anonymous_pattern_3,
        :anonymous_pattern_4,
        :anonymous_pattern_5,
        :anonymous_pattern_6,
        :terminators,
        :brackets,
        :delimiters,
        :keywords,
        :operators,
        :runes,
        :storage_types,
    ]

# 
# Helpers
# 
    # @space
    # @spaces
    # @digit
    # @digits
    # @standard_character
    # @word
    # @word_boundary
    # @white_space_start_boundary
    # @white_space_end_boundary
    # @start_of_document
    # @end_of_document
    # @start_of_line
    # @end_of_line
    part_of_a_variable = /[a-zA-Z_][a-zA-Z_0-9]*/
    # this is really useful for keywords. eg: variableBounds[/new/] wont match "newThing" or "thingnew"
    variableBounds = ->(regex_pattern) do
        lookBehindToAvoid(@standard_character).then(regex_pattern).lookAheadToAvoid(@standard_character)
    end
    variable = variableBounds[part_of_a_variable]

# 
# imports
# 
    grammar.import(PathFor[:pattern]["numeric_literals"])
# 
# basic patterns
# 
    # 
    # comments
    # 
        grammar[:comments] = [
            # comments like this /* imma comment */
            PatternRange.new(
                tag_as: "comment.block",
                start_pattern: Pattern.new(
                    match: /\/\*/,
                    tag_as: 'punctuation.definition.comment'
                ),
                end_pattern: Pattern.new(
                    match: /\*\//,
                    tag_as: 'punctuation.definition.comment'
                ),
            ),
            # comments like this // imma comment
            PatternRange.new(
                tag_as: "comment.line.double-slash",
                start_pattern: Pattern.new(
                    match: /\/\//,
                    tag_as: "punctuation.definition.comment",
                ),
                end_pattern: @end_of_line,
            )
        ]
    
    
#
# Save
#
grammar.save_to(
    syntax_name: "Go",
    syntax_dir: "./autogenerated",
    tag_dir: "./autogenerated",
)